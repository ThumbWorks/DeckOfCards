//
// PileAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class PileAPI {
    /**
     Draw a card from a pile

     - parameter deckId: (path) The deck_id of the &#x60;Deck&#x60; which we wish to draw a card from 
     - parameter pileName: (path) A name describing a pile. 
     - parameter cards: (query) Piles can be used for discarding, players hands, or whatever else. Piles are created on the fly, just give a pile a name and add a drawn card to the pile. If the pile didn&#x27;t exist before, it does now. After a card has been drawn from the deck it can be moved from pile to pile. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func addToPile(deckId: String, pileName: String, cards: [String], completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        addToPileWithRequestBuilder(deckId: deckId, pileName: pileName, cards: cards).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Draw a card from a pile
     - GET /deck/{deck_id}/pile/{pile_name}/add/
     - 

     - parameter deckId: (path) The deck_id of the &#x60;Deck&#x60; which we wish to draw a card from 
     - parameter pileName: (path) A name describing a pile. 
     - parameter cards: (query) Piles can be used for discarding, players hands, or whatever else. Piles are created on the fly, just give a pile a name and add a drawn card to the pile. If the pile didn&#x27;t exist before, it does now. After a card has been drawn from the deck it can be moved from pile to pile. 

     - returns: RequestBuilder<Void> 
     */
    open class func addToPileWithRequestBuilder(deckId: String, pileName: String, cards: [String]) -> RequestBuilder<Void> {
        var path = "/deck/{deck_id}/pile/{pile_name}/add/"
        let deckIdPreEscape = "\(deckId)"
        let deckIdPostEscape = deckIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deck_id}", with: deckIdPostEscape, options: .literal, range: nil)
        let pileNamePreEscape = "\(pileName)"
        let pileNamePostEscape = pileNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pile_name}", with: pileNamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "cards": cards
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Draw card from pile

     - parameter deckId: (path) List the contents of a given pile within a given deck. Note that this will not work with multiple decks. 
     - parameter pileName: (path) A name describing a pile. 
     - parameter count: (query) The number of cards to draw from the pile (optional)
     - parameter cards: (query) Pass the card codes you want to use using the cards parameter. Separate the card codes with commas, and each card code is a just a two character case-insensitive string. The value, one of A (for an ace), 2, 3, 4, 5, 6, 7, 8, 9, 0 (for a ten), J (jack), Q (queen), or K (king); The suit, one of S (Spades), D (Diamonds), C (Clubs), or H (Hearts). (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func drawCardFromPile(deckId: String, pileName: String, count: Int? = nil, cards: [String]? = nil, completion: @escaping ((_ data: Deck?,_ error: Error?) -> Void)) {
        drawCardFromPileWithRequestBuilder(deckId: deckId, pileName: pileName, count: count, cards: cards).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Draw card from pile
     - GET /deck/{deck_id}/pile/{pile_name}/draw/
     - 

     - examples: [{contentType=application/json, example={
  "cards" : [ {
    "image" : "image",
    "code" : "code",
    "suit" : "suit",
    "value" : "value"
  }, {
    "image" : "image",
    "code" : "code",
    "suit" : "suit",
    "value" : "value"
  } ],
  "success" : true,
  "shuffled" : true,
  "piles" : { },
  "error" : "error",
  "deck_id" : "deck_id",
  "remaining" : 0
}}]
     - parameter deckId: (path) List the contents of a given pile within a given deck. Note that this will not work with multiple decks. 
     - parameter pileName: (path) A name describing a pile. 
     - parameter count: (query) The number of cards to draw from the pile (optional)
     - parameter cards: (query) Pass the card codes you want to use using the cards parameter. Separate the card codes with commas, and each card code is a just a two character case-insensitive string. The value, one of A (for an ace), 2, 3, 4, 5, 6, 7, 8, 9, 0 (for a ten), J (jack), Q (queen), or K (king); The suit, one of S (Spades), D (Diamonds), C (Clubs), or H (Hearts). (optional)

     - returns: RequestBuilder<Deck> 
     */
    open class func drawCardFromPileWithRequestBuilder(deckId: String, pileName: String, count: Int? = nil, cards: [String]? = nil) -> RequestBuilder<Deck> {
        var path = "/deck/{deck_id}/pile/{pile_name}/draw/"
        let deckIdPreEscape = "\(deckId)"
        let deckIdPostEscape = deckIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deck_id}", with: deckIdPostEscape, options: .literal, range: nil)
        let pileNamePreEscape = "\(pileName)"
        let pileNamePostEscape = pileNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pile_name}", with: pileNamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "count": count?.encodeToJSON(), 
                        "cards": cards
        ])

        let requestBuilder: RequestBuilder<Deck>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List cards in pile

     - parameter deckId: (path) List the contents of a given pile within a given deck. Note that this will not work with multiple decks. 
     - parameter pileName: (path) A name describing a pile. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listCardsInPile(deckId: String, pileName: String, completion: @escaping ((_ data: Deck?,_ error: Error?) -> Void)) {
        listCardsInPileWithRequestBuilder(deckId: deckId, pileName: pileName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List cards in pile
     - GET /deck/{deck_id}/pile/{pile_name}/list/
     - 

     - examples: [{contentType=application/json, example={
  "cards" : [ {
    "image" : "image",
    "code" : "code",
    "suit" : "suit",
    "value" : "value"
  }, {
    "image" : "image",
    "code" : "code",
    "suit" : "suit",
    "value" : "value"
  } ],
  "success" : true,
  "shuffled" : true,
  "piles" : { },
  "error" : "error",
  "deck_id" : "deck_id",
  "remaining" : 0
}}]
     - parameter deckId: (path) List the contents of a given pile within a given deck. Note that this will not work with multiple decks. 
     - parameter pileName: (path) A name describing a pile. 

     - returns: RequestBuilder<Deck> 
     */
    open class func listCardsInPileWithRequestBuilder(deckId: String, pileName: String) -> RequestBuilder<Deck> {
        var path = "/deck/{deck_id}/pile/{pile_name}/list/"
        let deckIdPreEscape = "\(deckId)"
        let deckIdPostEscape = deckIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deck_id}", with: deckIdPostEscape, options: .literal, range: nil)
        let pileNamePreEscape = "\(pileName)"
        let pileNamePostEscape = pileNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pile_name}", with: pileNamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Deck>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Shuffle a pile

     - parameter deckId: (path) The deck_id of the &#x60;Deck&#x60; which we wish to shuffle 
     - parameter pileName: (path) A name describing a pile. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func shufflePile(deckId: String, pileName: String, completion: @escaping ((_ data: Deck?,_ error: Error?) -> Void)) {
        shufflePileWithRequestBuilder(deckId: deckId, pileName: pileName).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Shuffle a pile
     - GET /deck/{deck_id}/pile/{pile_name}/shuffle/
     - 

     - examples: [{contentType=application/json, example={
  "cards" : [ {
    "image" : "image",
    "code" : "code",
    "suit" : "suit",
    "value" : "value"
  }, {
    "image" : "image",
    "code" : "code",
    "suit" : "suit",
    "value" : "value"
  } ],
  "success" : true,
  "shuffled" : true,
  "piles" : { },
  "error" : "error",
  "deck_id" : "deck_id",
  "remaining" : 0
}}]
     - parameter deckId: (path) The deck_id of the &#x60;Deck&#x60; which we wish to shuffle 
     - parameter pileName: (path) A name describing a pile. 

     - returns: RequestBuilder<Deck> 
     */
    open class func shufflePileWithRequestBuilder(deckId: String, pileName: String) -> RequestBuilder<Deck> {
        var path = "/deck/{deck_id}/pile/{pile_name}/shuffle/"
        let deckIdPreEscape = "\(deckId)"
        let deckIdPostEscape = deckIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{deck_id}", with: deckIdPostEscape, options: .literal, range: nil)
        let pileNamePreEscape = "\(pileName)"
        let pileNamePostEscape = pileNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pile_name}", with: pileNamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Deck>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
